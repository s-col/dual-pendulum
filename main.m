%2重振子の運動シミュレーション

clear; close all;

%% シミュレーション設定
odf = @odefun;      % 常微分方程式を定める関数
t_simu = 30;       % シミュレーション時間[s]
dt_simu = 0.001;    % シミュレーション刻み[s]

freq_save = 10;    % 記録間隔[steps]
freq_disp = 5000;  % 進捗表示間隔[steps]

%% auxdataを取得
auxdata = set_auxdata();

%% シミュレーション
steps = int64(0);
steps_f = int64(t_simu/dt_simu);
n_data = steps_f / freq_save + 1;

[t, x] = init();  % 初期値を設定

% 結果を格納する配列
ts = zeros(1, n_data);
xs = zeros(size(x, 1), n_data);

ts(1) = t;
xs(:, 1) = x;

idx_data = 2;

while steps <= steps_f
    steps = steps + 1;
    
    % シミュレーションを1ステップ進める
    [t, x] = step_rk(odf, t, x, dt_simu, auxdata);
    
    % 角度を正規化
    % x(1:2) = normalize_angle(x(1:2)); 
    
    % 記録
    if mod(steps, freq_save) == 0
        ts(idx_data) = t;
        xs(:, idx_data) = x;
        idx_data = idx_data + 1;
    end
    
    % 進捗表示
    if mod(steps, freq_disp) == 0
        fprintf('time = %.2f\n', t);
    end 
end

%% 力学的エネルギーを計算
g = auxdata.g;
m1 = auxdata.m1;
l1 = auxdata.l1;
m2 = auxdata.m2;
l2 = auxdata.l2;

Ts = 0.5.*(m1+m2).*l1.^2.*xs(3, :).^2 + m2.*l1.*l2.*xs(3, :).*xs(4, :).*cos(xs(1, :)-xs(2, :)) + 0.5.*m2.*l2.^2.*xs(4, :).^2;
Us = - (m1+m2).*l1.*g.*cos(xs(1, :)) - m2.*l2.*g.*cos(xs(2, :));
Es = Ts + Us;

%% プロット
simu_plot

%% アニメーション
simu_animation